# generated by maixhub, tested on maixpy3 v0.4.8
# copy files to TF card and plug into board and power on
from machine import UART   #用于串口配置
from machine import Timer #用于产生定时器中断 用于读取是否接收到数据包
import sensor, image, lcd, time
import KPU as kpu
import gc, sys
from fpioa_manager import fm

input_size = (224, 224)
labels = ['toufu', 'drumsticks', 'fish']
anchors = [4.69, 2.31, 6.34, 5.03, 2.34, 4.06, 3.22, 6.28, 6.55, 3.34]
#received_data = b""
#R_data = b''
Rx_StateFlag=0  #接收数据包状态标准位
Rx_index=0      #接收数据数组索引下标
Rdata_array=bytearray([0,0,0,0])#接收数据数组
Rx_OK_flag=0 #接收完成标志位 0没有接收成功 1接收成功
mark = 0;
#初始化定时器0，周期5ms

def init_uart():
    fm.register(15, fm.fpioa.UART1_TX, force=True)#PA3
    fm.register(16, fm.fpioa.UART1_RX, force=True)#PA2

    uart = UART(UART.UART1, 115200, 8, 0, 1, timeout=1000, read_buf_len=256)
    return uart
uart = init_uart()


def fun(void):
    global Rx_OK_flag
    R_data = uart.readchar()
    if R_data>0:
        if R_data==0x0D: #0xAA
            Rx_OK_flag=1
#初始化定时器0，周期5ms
tim=Timer(Timer.TIMER0,Timer.CHANNEL0,mode=Timer.MODE_PERIODIC,period=1,unit=Timer.UNIT_MS,callback=fun)


def lcd_show_except(e):
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=input_size)
    img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    lcd.display(img)

class Comm:
    def __init__(self, uart):
        self.uart = uart
    def send_detect_result(self, objects, labels):
        global mark
        global Rx_OK_flag
        msg = ""
        if objects:
            for obj in objects:
                pos = obj.rect()
                p = obj.value()
                idx = obj.classid()
                label = labels[idx]
                msg += "{}".format(label)
        msg = msg + "\r"
        if Rx_OK_flag == 1:
            self.uart.write(msg.encode())
            Rx_OK_flag = 0;



def main(anchors, labels = None, model_addr="/sd/m.kmodel", sensor_window=input_size, lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_windowing(sensor_window)
    sensor.set_hmirror(sensor_hmirror)
    sensor.set_vflip(sensor_vflip)
    sensor.run(1)

    lcd.init(type=1)
    lcd.rotation(lcd_rotation)
    lcd.clear(lcd.WHITE)

    if not labels:
        with open('labels.txt','r') as f:
            exec(f.read())
    if not labels:
        print("no labels.txt")
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "no labels.txt", color=(255, 0, 0), scale=2)
        lcd.display(img)
        return 1
    try:
        img = image.Image("startup.jpg")
        lcd.display(img)
    except Exception:
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "loading model...", color=(255, 255, 255), scale=2)
        lcd.display(img)

    #uart = init_uart()
    comm = Comm(uart)

    try:
        task = None
        task = kpu.load(model_addr)
        kpu.init_yolo2(task, 0.5, 0.3, 5, anchors) # threshold:[0,1], nms_value: [0, 1]
        while(True):
            img = sensor.snapshot()
            t = time.ticks_ms()
            objects = kpu.run_yolo2(task, img)
            t = time.ticks_ms() - t
            if objects:
                for obj in objects:
                    pos = obj.rect()
                    img.draw_rectangle(pos)
                    img.draw_string(pos[0], pos[1], "%s : %.2f" %(labels[obj.classid()], obj.value()), scale=2, color=(255, 0, 0))
            #uart = init_uart()
            comm.send_detect_result(objects, labels)
            img.draw_string(0, 200, "t:%dms" %(t), scale=2, color=(255, 0, 0))
            lcd.display(img)
    except Exception as e:
        raise e
    #try:
        #receive_data(uart)  # 启动接收数据的函数
    #except Exception as e:
        #print("Error receiving data:", e)
    finally:
        if not task is None:
            kpu.deinit(task)


if __name__ == "__main__":
    try:
        # main(anchors = anchors, labels=labels, model_addr=0x300000, lcd_rotation=0)
        main(anchors = anchors, labels=labels, model_addr="/sd/model-107808.kmodel")
    except Exception as e:
        sys.print_exception(e)
        lcd_show_except(e)
    finally:
        gc.collect()
